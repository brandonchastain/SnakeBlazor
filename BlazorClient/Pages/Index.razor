@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Microsoft.JSInterop
@using SnakeLib
@using SnakeLib.Contracts
@using SnakeLib.Data
@inject IJSRuntime JsRuntime
@inject ILogger<SnakeGame> logger
@inject HttpClient Client

<div 
    id="brandonContainer"
    tabindex="0"
    @onclick="Clicked"
    @onkeydown="OnKeyDown">

    <div id="canvasHolder" style="position: fixed; background-color: black; width: 100%; height: 100%" >
        <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
        <input type="text" maxlength="3" id="nameInput" style="position: absolute; top: 30px; left: 50px; display: none;" @bind="userName" />
        <button @onclick="SaveHighScore" id="submitButton" style="position: absolute; top: 60px; left: 50px; display: none;">Submit</button>
    </div>

</div>

@code {
    private SnakeGame Game;
    private SnakeGameBlazorDrawer Drawer;
    private bool forceRenderOnce;
    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;
    private DateTimeOffset LastRender;

    private string userName = "";
    private bool showInput = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Game == null)
        {
            var repo = new HighScoreRepository(logger, Client);
            Game = new SnakeGame(logger, repo);
        }

        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();

        if (firstRender)
        {
            Drawer = new SnakeGameBlazorDrawer(Game);
        }
        
        if (showInput)
        {
            // JavaScript to focus on the input field
            await JsRuntime.InvokeVoidAsync("eval", "document.getElementById('nameInput').style.display = 'block'; document.getElementById('nameInput').focus();");
            await JsRuntime.InvokeVoidAsync("eval", "document.getElementById('submitButton').style.display = 'block';");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("eval", "document.getElementById('nameInput').style.display = 'none';");
            await JsRuntime.InvokeVoidAsync("eval", "document.getElementById('submitButton').style.display = 'none';");
        }
    }

    public void OnKeyDown(KeyboardEventArgs e)
    {
        Game.playerInput.OnKeyDown(e.Code);
        forceRenderOnce = true;
    }

    public void Clicked(MouseEventArgs e)
    {
        if (showInput)
        {
            return;
        }

        if (Game.GameState == GameState.NotStarted 
            && e.OffsetX < SnakeGame.Width 
            && e.OffsetY < SnakeGame.Height 
            && e.OffsetX >= SnakeGame.Width - 700
            && e.OffsetY >= SnakeGame.Height - 100)
        {
            Game.GoHighScoresIfNeeded();
            return;
        }

        Game.playerInput.SetEnterPressed();
    }

    [JSInvokable]
    public void RightSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowLeft");
        forceRenderOnce = true;
    }

    [JSInvokable]
    public void LeftSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowRight");
        forceRenderOnce = true;

    }
    [JSInvokable]
    public void UpSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowDown");
        forceRenderOnce = true;

    }
    [JSInvokable]
    public void DownSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowUp");
        forceRenderOnce = true;

    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => Game.Resize((int)width, (int)height);

    public async Task SaveHighScore()
    {
        var score = new HighScore()
        {
            Username = userName,
            Score = Game.Score
        };
        Game.SaveHighScore(score);

        showInput = false;
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(DateTime timeStamp)
    {
        if (showInput)
        {
            return;
        }

				// render
				if (forceRenderOnce || timeStamp - LastRender > TimeSpan.FromMilliseconds(SnakeGame.GameSpeed / 2))
        {
            await this.ctx.BeginBatchAsync();
            await Drawer.Draw(this.ctx);
            await this.ctx.EndBatchAsync();

            if (!forceRenderOnce)
            {
                LastRender = timeStamp;
            }

            forceRenderOnce = false;
        }

				// update game
        Game.Tick(timeStamp);

        if (Game.GameState == GameState.GameOver)
        {
            showInput = true;
            StateHasChanged();
        }

      
    }
}
