@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using SnakeLib
@inject IJSRuntime JsRuntime;

<div 
    id="brandonContainer"
    tabindex="0"
    @onclick="Clicked"
    @onkeydown="OnKeyDown">

    <div id="canvasHolder" style="position: fixed; background-color: black; width: 100%; height: 100%" >
        <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
    </div>

</div>

@code{
    private const int InitialGameSpeed = 160;
    private int gameSpeed = InitialGameSpeed;
    private SnakeGame Game = new SnakeGame();
    private SnakeGameBlazorDrawer Drawer;
    private bool forceRenderOnce;

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    private DateTimeOffset LastGameTick;
    private DateTimeOffset LastRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();

        if (firstRender)
        {
            Drawer = new SnakeGameBlazorDrawer(Game);
        }

        //Game.Run(); // multithreading is not supported in Blazor! :O
    }

    public void OnKeyDown(KeyboardEventArgs e)
    {
        Game.playerInput.OnKeyDown(e.Code);

        forceRenderOnce = true;
    }

    public void Clicked()
    {
        Game.playerInput.SetEnterPressed();
    }

    [JSInvokable]
    public void RightSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowLeft");
        forceRenderOnce = true;
    }
    [JSInvokable]
    public void LeftSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowRight");
        forceRenderOnce = true;

    }
    [JSInvokable]
    public void UpSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowDown");
        forceRenderOnce = true;

    }
    [JSInvokable]
    public void DownSwipe()
    {
        Game.playerInput.OnKeyDown("ArrowUp");
        forceRenderOnce = true;

    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => Game.Resize((int)width, (int)height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        Game.ReadPlayerInput();

        if (DateTimeOffset.Now - LastGameTick > TimeSpan.FromMilliseconds(gameSpeed))
        {
            Game.Update();
            LastGameTick = DateTimeOffset.Now;
        }

        if (forceRenderOnce || DateTimeOffset.Now - LastRender > TimeSpan.FromMilliseconds(15))
        {
            await this.ctx.BeginBatchAsync();
            await Drawer.Draw(this.ctx);
            await this.ctx.EndBatchAsync();

            double fps = 1.0 / (DateTimeOffset.Now - LastRender).TotalSeconds;

            if (!forceRenderOnce)
            {
                LastRender = DateTimeOffset.Now;
            }

            forceRenderOnce = false;
        }
    }
}
